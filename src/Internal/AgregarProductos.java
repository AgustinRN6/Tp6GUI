
package Internal;

import javax.swing.table.DefaultTableModel;
import Visual.Menu;
import Clases.*;
import java.beans.PropertyVetoException;
import java.util.Iterator;
import java.util.TreeSet;
import javax.swing.JOptionPane;

public class AgregarProductos extends javax.swing.JInternalFrame {
    //Se crea el modelo de la tabla, y se reemplaza el valor de celda editable a falso
    private DefaultTableModel modeloTabla = new DefaultTableModel() {
    @Override
    public boolean isCellEditable(int fila,int columna) {        
        return false;
    }
    };
    /**
     * Creates new form AgregarProductos
     */
    public AgregarProductos() {
        initComponents();
        crearVentana();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlTitulo = new javax.swing.JLabel();
        jpPanel = new javax.swing.JPanel();
        jlCategoria = new javax.swing.JLabel();
        jcbCategoria = new javax.swing.JComboBox<>();
        jspTabla = new javax.swing.JScrollPane();
        jtTabla = new javax.swing.JTable();
        jpPanelProductos = new javax.swing.JPanel();
        jlStock = new javax.swing.JLabel();
        jlRubro = new javax.swing.JLabel();
        jlPrecio = new javax.swing.JLabel();
        jlDescripcion = new javax.swing.JLabel();
        jlCodigo = new javax.swing.JLabel();
        jtfCodigo = new javax.swing.JTextField();
        jtfDescripcion = new javax.swing.JTextField();
        jtfPrecio = new javax.swing.JTextField();
        jcbRubro = new javax.swing.JComboBox<>();
        jsStock = new javax.swing.JSpinner();
        jbBuscar = new javax.swing.JButton();
        jbCerrar = new javax.swing.JButton();
        jbNuevo = new javax.swing.JButton();
        jbGuardar = new javax.swing.JButton();
        jbActualizar = new javax.swing.JButton();
        jbEliminar = new javax.swing.JButton();

        jlTitulo.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jlTitulo.setForeground(new java.awt.Color(0, 0, 0));
        jlTitulo.setText("GESTIÃ“N DE PRODUCTOS");

        jpPanel.setBackground(java.awt.Color.lightGray);
        jpPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jlCategoria.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jlCategoria.setText("Filtrar por categoria:");

        javax.swing.GroupLayout jpPanelLayout = new javax.swing.GroupLayout(jpPanel);
        jpPanel.setLayout(jpPanelLayout);
        jpPanelLayout.setHorizontalGroup(
            jpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlCategoria)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpPanelLayout.setVerticalGroup(
            jpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPanelLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCategoria)
                    .addComponent(jcbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jtTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jspTabla.setViewportView(jtTabla);

        jpPanelProductos.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jlStock.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jlStock.setText("Stock:");

        jlRubro.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jlRubro.setText("Rubro:");

        jlPrecio.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jlPrecio.setText("Precio:");

        jlDescripcion.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jlDescripcion.setText("Descripcion:");

        jlCodigo.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jlCodigo.setText("Codigo:");

        javax.swing.GroupLayout jpPanelProductosLayout = new javax.swing.GroupLayout(jpPanelProductos);
        jpPanelProductos.setLayout(jpPanelProductosLayout);
        jpPanelProductosLayout.setHorizontalGroup(
            jpPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPanelProductosLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jpPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpPanelProductosLayout.createSequentialGroup()
                        .addComponent(jlCodigo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpPanelProductosLayout.createSequentialGroup()
                        .addComponent(jlDescripcion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jtfDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpPanelProductosLayout.createSequentialGroup()
                        .addGroup(jpPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlPrecio)
                            .addComponent(jlRubro)
                            .addComponent(jlStock))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jpPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                            .addComponent(jcbRubro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jsStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jpPanelProductosLayout.setVerticalGroup(
            jpPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPanelProductosLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jpPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCodigo)
                    .addComponent(jtfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDescripcion)
                    .addComponent(jtfDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlPrecio)
                    .addComponent(jtfPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlRubro)
                    .addComponent(jcbRubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpPanelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlStock)
                    .addComponent(jsStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        jbBuscar.setText("buscar");
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbCerrar.setFont(new java.awt.Font("Arial Black", 1, 10)); // NOI18N
        jbCerrar.setText("cerrar");
        jbCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCerrarActionPerformed(evt);
            }
        });

        jbNuevo.setText("Nuevo");
        jbNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNuevoActionPerformed(evt);
            }
        });

        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbActualizar.setText("Actualizar");
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jbEliminar.setText("Eliminar");
        jbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jpPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jspTabla, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jlTitulo)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(50, 50, 50))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpPanelProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jbNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jbGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jbActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jbEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(0, 16, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jlTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jspTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                        .addComponent(jbCerrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addComponent(jpPanelProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        
        try {

            Integer codigo = Integer.valueOf(jtfCodigo.getText());
            String descripcion = jtfDescripcion.getText();
            Double precio = Double.valueOf(jtfPrecio.getText());
            String rubro = (String) jcbRubro.getSelectedItem();
            Integer stock = (Integer)jsStock.getValue(); //Toma el valor que se encuentra en ese momento en el jSpinner

            //Se crea producto con informacion ingresada desde los JTextField
            Producto p = new Producto(rubro, null, precio, descripcion, stock, codigo);

            //Se evalua si estÃ¡n completo todos los casilleros
            if (descripcion.isEmpty() || rubro.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Todos los casilleros deben estar completos");
            } else if (productoIgual(p)) {
                //Se evalua si el producto ya ha sido creado o no. (compara el cÃ³digo unicamente)
                JOptionPane.showMessageDialog(null, "No puede haber un producto con el mismo cÃ³digo, intentelo nuevamente");
            } else if (stock <= 0) {
                //Se evalua si el stock es 0 o menos
                JOptionPane.showMessageDialog(null, "Tiene que ser minimo de 1 el stock");
            } else {
                //Se agrega el objeto con la seleccion de la categoria, y los datos ingresados por el usuario        
                //Se carga producto en el TreeSet intermedio, necesita actualizarse para guardarse en la base de datos
                buffer.add(p);
                JOptionPane.showMessageDialog(null, "Se agregÃ³ con Ã©xito el producto, actualice por favor");
            }

        } catch (NumberFormatException e) { //Si en precio el usuario NO coloca un valor numerico

            JOptionPane.showMessageDialog(null, "En la casilla Precio o CÃ³digo, debe colocar solo un valor numerico.");

        }
        
        
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        //Se realiza la carga de datos del estado intermedio a la base de datos de Productos.  
        boolean productosRepetidos = false;
        for(Producto bufferP: buffer) {
            Menu.productos.add(bufferP);
        }
        JOptionPane.showMessageDialog(null, "Se realizÃ³ con Ã©xito la actualizaciÃ³n");
        //Se actualiza la tabla
        cargarProductos();
        //Se limpia el buffer
        buffer.clear();
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jbEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbEliminarActionPerformed

    private void jbCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCerrarActionPerformed
        //Se cierra la ventana si el buffer estÃ¡ vacÃ­o, si no saldrÃ¡ una advertencia
        if (buffer.isEmpty()) {
            System.out.println(evt.getActionCommand());
            setVisible(false); //Se cierra la ventana
        } else {
            //Se advierte que puede eliminarse la informaciÃ³n del buffer, debido a que es local de esta ventana
            //Si el usuario coloca la opciÃ³n SI, el valor da 0, se cierra la ventana.
            int si_no = JOptionPane.showConfirmDialog(null, 
                        "Si no actualiza, lo Ãºltimo registrado se perderÃ¡, Â¿Desea continuar?",
                        "ADVERTENCIA", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (si_no == 0) {
                System.out.println(evt.getActionCommand());
                setVisible(false); //Se cierra la ventana
            }
        }

                
    }//GEN-LAST:event_jbCerrarActionPerformed

    private void jbNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNuevoActionPerformed
        //Limpia los JTextField para colocar un nuevo producto
        jtfCodigo.setText("");
        jtfDescripcion.setText("");
        jtfPrecio.setText("");
        jsStock.setValue(0);
    }//GEN-LAST:event_jbNuevoActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        //Llama al mÃ©todo cargarProductos para buscar por la categoria seleccionada
        cargarProductos();
    }//GEN-LAST:event_jbBuscarActionPerformed

    //Se crea para guardar elementos en un estado intermedio (previo a la carga a la base de datos)
    private TreeSet<Producto> buffer = new TreeSet<>(Producto.compararPorCodigo);
    //Se instancia la clase categorÃ­a, que ya fija los distintos tipos de categoria
    private CategoriasData categorias = new CategoriasData();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbCerrar;
    private javax.swing.JButton jbEliminar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbNuevo;
    private javax.swing.JComboBox<String> jcbCategoria;
    private javax.swing.JComboBox<String> jcbRubro;
    private javax.swing.JLabel jlCategoria;
    private javax.swing.JLabel jlCodigo;
    private javax.swing.JLabel jlDescripcion;
    private javax.swing.JLabel jlPrecio;
    private javax.swing.JLabel jlRubro;
    private javax.swing.JLabel jlStock;
    private javax.swing.JLabel jlTitulo;
    private javax.swing.JPanel jpPanel;
    private javax.swing.JPanel jpPanelProductos;
    private javax.swing.JSpinner jsStock;
    private javax.swing.JScrollPane jspTabla;
    private javax.swing.JTable jtTabla;
    private javax.swing.JTextField jtfCodigo;
    private javax.swing.JTextField jtfDescripcion;
    private javax.swing.JTextField jtfPrecio;
    // End of variables declaration//GEN-END:variables

    //agrega las categorias en el jbcCategoria y jbcRubro
    private void cargarCategoria() {

        for (String cat : categorias.getCategorias()) {

            jcbCategoria.addItem(cat);
            jcbRubro.addItem(cat);
        }
        jcbCategoria.addItem("Todos"); //se agrega la opciÃ³n para mostrar la tabla completa
    }
    
    //Se agrega las columnas con sus nombres correspondientes a la tabla
    private void columnaProductos() {
        modeloTabla.addColumn("Codigo");
        modeloTabla.addColumn("Descripcion");
        modeloTabla.addColumn("Precio");
        modeloTabla.addColumn("Categoria");
        modeloTabla.addColumn("Stock");
        jtTabla.setModel(modeloTabla);
    }
    
    
    
    //Se agregan todos los productos cargados en el TreeSet (se filtra segÃºn rubro/categoria
    private void cargarProductos() {
        String categoriaSelec = (String)jcbCategoria.getSelectedItem(); //Toma el rubro que se filtrarÃ¡ en la tabla
        limpiarTabla();
        Iterator<Producto> iterar = Menu.productos.iterator();
        while (iterar.hasNext()) {            
            Producto p = iterar.next();
            if (p.getRubro().equalsIgnoreCase(categoriaSelec) || categoriaSelec.equalsIgnoreCase("Todos")) {
                modeloTabla.addRow(new Object[]{p.getCodigo(), p.getDescripcion(), p.getPrecio(),p.getRubro(),p.getStock()});  
            }
                      
        }        
    }
    
    //Limpia la tabla
    public void limpiarTabla() {
        
        int f = modeloTabla.getRowCount()-1; //total de filas (-1 para recorrer for)
        for (int i = f; i >= 0; i--) {            
            modeloTabla.removeRow(i);         
        }   
    }
    
    //Compara si el producto en la TreeSet general o intermedio tiene el mismo cÃ³digo que el ingresado
    private boolean productoIgual(Producto pAComparar) {
        boolean esIgual = false;
        Iterator<Producto> iterar = Menu.productos.iterator();
        //Para el general
        while (iterar.hasNext()) {
            Producto p = iterar.next();
            if (p.getCodigo().equals(pAComparar.getCodigo())) {
                esIgual = true;
            }
        }
        //Para el intermedio
        Iterator<Producto> iterarB = buffer.iterator();
        while (iterarB.hasNext()) {
            Producto p = iterarB.next();
            if (p.getCodigo().equals(pAComparar.getCodigo())) {
                esIgual = true;
            }
        }
        //Si no se encuentra un cÃ³digo identico, retorna falso
        return esIgual;
    }
    
    //Evento cuando se crea la ventana
    private void crearVentana() {        
        //Se limpia los JComboBox
        jcbCategoria.removeAllItems();
        jcbRubro.removeAllItems();
        //Se coloca titulo encabezado
        this.setTitle("De todo S.A. Productos");
        //Se carga las categorias de los JComboBox
        cargarCategoria();
        //Se cargan las columnas de las tablas
        columnaProductos();
        //Se cargan los productos en la tabla
        cargarProductos();        
    }
    
}
